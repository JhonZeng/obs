<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="6121b6f1-af77-40fa-82f3-09377c219664" name="Changes" comment="After limited environment testing, it is tailored to our needs, which is to detect the presence of music in the ambient audio captured by the live microphone. The root mean square (RMS) analysis originally used in the V3-1 code is not a suitable method for detecting the presence of music.&#10;&#10;This update changes the analysis method from root mean square (RMS) analysis to short-time Fourier transform (STFT). Analyze the frequency components of the audio signal by converting the time domain audio data to the frequency domain to determine whether there are prominent frequency peaks. The final implementation determines whether there is a melody pattern or musical content in the ambient audio captured by the microphone. If it exists, it proves that there is at least audio content that can be considered a melody in the environmental audio. At this time, we operate obs to switch audio sources.&#10;&#10;Advantages: It uses a relatively simple algorithm to analyze music frequencies. While completing basic analysis, it reduces the consumption of live broadcast machine functions.&#10;Disadvantages: The analysis method used is not robust enough, and it is difficult to detect some long melodies. And under the interference of complex external environmental noise, it is impossible to ensure that accurate frequency analysis can be completed.&#10;At present, the recording time of a single analysis unit is 6s. If the length of a single chord exceeds 3s, the detection cannot be ensured (the principle is to detect whether there is a repeated spectrum. To detect it, it must be repeated at least once.). The length of the recording time of this analysis unit is directly proportional to the system response speed. That is, when set to 6s, it will be judged every 6s whether to switch the audio source. Continuing to lengthen the recording time will cause the system to wait too long for each response, making it meaningless.">
      <change afterPath="$PROJECT_DIR$/User manual.md" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="v2" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="SET_USER_NAME_GLOBALLY" value="false" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2cdMkKW6smbFxXMvWidj1HlVKZo" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "git-widget-placeholder": "v3-Monitoring-devices-are-optional",
    "last_opened_file_path": "/Users/johnzeng/PycharmProjects/obs",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "preferences.pluginManager",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="main" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
      <module name="obs" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <envs>
        <env name="PYTHONUNBUFFERED" value="1" />
      </envs>
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/main.py" />
      <option name="PARAMETERS" value="" />
      <option name="SHOW_COMMAND_LINE" value="false" />
      <option name="EMULATE_TERMINAL" value="false" />
      <option name="MODULE_MODE" value="false" />
      <option name="REDIRECT_INPUT" value="false" />
      <option name="INPUT_FILE" value="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-d68999036c7f-b11f5e8da5ad-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.14475.56" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="6121b6f1-af77-40fa-82f3-09377c219664" name="Changes" comment="" />
      <created>1708437145049</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1708437145049</updated>
      <workItem from="1708437147888" duration="738000" />
      <workItem from="1708438472049" duration="262000" />
      <workItem from="1708438742594" duration="592000" />
      <workItem from="1708439431195" duration="761000" />
      <workItem from="1708440954455" duration="303000" />
      <workItem from="1708536863592" duration="6806000" />
      <workItem from="1708554356341" duration="98000" />
      <workItem from="1708611248371" duration="233000" />
      <workItem from="1708611486226" duration="2000" />
      <workItem from="1708833198426" duration="1049000" />
      <workItem from="1708850729921" duration="2691000" />
      <workItem from="1708888102254" duration="5738000" />
      <workItem from="1709307078855" duration="569000" />
      <workItem from="1709308141728" duration="2768000" />
      <workItem from="1709317786235" duration="40000" />
      <workItem from="1709317833482" duration="3040000" />
    </task>
    <task id="LOCAL-00001" summary="Changes">
      <option name="closed" value="true" />
      <created>1708439813089</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1708439813089</updated>
    </task>
    <task id="LOCAL-00002" summary="Changes">
      <option name="closed" value="true" />
      <created>1708552382230</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1708552382230</updated>
    </task>
    <task id="LOCAL-00003" summary="Changes">
      <option name="closed" value="true" />
      <created>1708554441639</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1708554441639</updated>
    </task>
    <task id="LOCAL-00004" summary="Changes">
      <option name="closed" value="true" />
      <created>1708611349369</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1708611349369</updated>
    </task>
    <task id="LOCAL-00005" summary="Changes">
      <option name="closed" value="true" />
      <created>1708854682780</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1708854682780</updated>
    </task>
    <task id="LOCAL-00006" summary="Changes">
      <option name="closed" value="true" />
      <created>1709306769345</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1709306769345</updated>
    </task>
    <task id="LOCAL-00007" summary="After limited environment testing, it is tailored to our needs, which is to detect the presence of music in the ambient audio captured by the live microphone. The root mean square (RMS) analysis originally used in the V3-1 code is not a suitable method for detecting the presence of music.&#10;&#10;This update changes the analysis method from root mean square (RMS) analysis to short-time Fourier transform (STFT). Analyze the frequency components of the audio signal by converting the time domain audio data to the frequency domain to determine whether there are prominent frequency peaks. The final implementation determines whether there is a melody pattern or musical content in the ambient audio captured by the microphone. If it exists, it proves that there is at least audio content that can be considered a melody in the environmental audio. At this time, we operate obs to switch audio sources.&#10;&#10;Advantages: It uses a relatively simple algorithm to analyze music frequencies. While completing basic analysis, it reduces the consumption of live broadcast machine functions.&#10;Disadvantages: The analysis method used is not robust enough, and it is difficult to detect some long melodies. And under the interference of complex external environmental noise, it is impossible to ensure that accurate frequency analysis can be completed.&#10;At present, the recording time of a single analysis unit is 6s. If the length of a single chord exceeds 3s, the detection cannot be ensured (the principle is to detect whether there is a repeated spectrum. To detect it, it must be repeated at least once.). The length of the recording time of this analysis unit is directly proportional to the system response speed. That is, when set to 6s, it will be judged every 6s whether to switch the audio source. Continuing to lengthen the recording time will cause the system to wait too long for each response, making it meaningless.">
      <option name="closed" value="true" />
      <created>1709322140710</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1709322140710</updated>
    </task>
    <option name="localTasksCounter" value="8" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Changes" />
    <MESSAGE value="After limited environment testing, it is tailored to our needs, which is to detect the presence of music in the ambient audio captured by the live microphone. The root mean square (RMS) analysis originally used in the V3-1 code is not a suitable method for detecting the presence of music.&#10;&#10;This update changes the analysis method from root mean square (RMS) analysis to short-time Fourier transform (STFT). Analyze the frequency components of the audio signal by converting the time domain audio data to the frequency domain to determine whether there are prominent frequency peaks. The final implementation determines whether there is a melody pattern or musical content in the ambient audio captured by the microphone. If it exists, it proves that there is at least audio content that can be considered a melody in the environmental audio. At this time, we operate obs to switch audio sources.&#10;&#10;Advantages: It uses a relatively simple algorithm to analyze music frequencies. While completing basic analysis, it reduces the consumption of live broadcast machine functions.&#10;Disadvantages: The analysis method used is not robust enough, and it is difficult to detect some long melodies. And under the interference of complex external environmental noise, it is impossible to ensure that accurate frequency analysis can be completed.&#10;At present, the recording time of a single analysis unit is 6s. If the length of a single chord exceeds 3s, the detection cannot be ensured (the principle is to detect whether there is a repeated spectrum. To detect it, it must be repeated at least once.). The length of the recording time of this analysis unit is directly proportional to the system response speed. That is, when set to 6s, it will be judged every 6s whether to switch the audio source. Continuing to lengthen the recording time will cause the system to wait too long for each response, making it meaningless." />
    <option name="LAST_COMMIT_MESSAGE" value="After limited environment testing, it is tailored to our needs, which is to detect the presence of music in the ambient audio captured by the live microphone. The root mean square (RMS) analysis originally used in the V3-1 code is not a suitable method for detecting the presence of music.&#10;&#10;This update changes the analysis method from root mean square (RMS) analysis to short-time Fourier transform (STFT). Analyze the frequency components of the audio signal by converting the time domain audio data to the frequency domain to determine whether there are prominent frequency peaks. The final implementation determines whether there is a melody pattern or musical content in the ambient audio captured by the microphone. If it exists, it proves that there is at least audio content that can be considered a melody in the environmental audio. At this time, we operate obs to switch audio sources.&#10;&#10;Advantages: It uses a relatively simple algorithm to analyze music frequencies. While completing basic analysis, it reduces the consumption of live broadcast machine functions.&#10;Disadvantages: The analysis method used is not robust enough, and it is difficult to detect some long melodies. And under the interference of complex external environmental noise, it is impossible to ensure that accurate frequency analysis can be completed.&#10;At present, the recording time of a single analysis unit is 6s. If the length of a single chord exceeds 3s, the detection cannot be ensured (the principle is to detect whether there is a repeated spectrum. To detect it, it must be repeated at least once.). The length of the recording time of this analysis unit is directly proportional to the system response speed. That is, when set to 6s, it will be judged every 6s whether to switch the audio source. Continuing to lengthen the recording time will cause the system to wait too long for each response, making it meaningless." />
  </component>
</project>